# Generated by Django 5.2.4 on 2025-07-19 07:45

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('dataset_type', models.CharField(choices=[('training', 'Training Dataset'), ('validation', 'Validation Dataset'), ('test', 'Test Dataset')], default='training', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('zip_file', models.FileField(help_text='Upload a ZIP file containing organized image folders', upload_to='datasets/uploads/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['zip'])])),
                ('total_images', models.PositiveIntegerField(default=0)),
                ('total_classes', models.PositiveIntegerField(default=0)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('processing_log', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_datasets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dataset',
                'verbose_name_plural': 'Datasets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DatasetImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='datasets/images/')),
                ('original_filename', models.CharField(max_length=255)),
                ('class_name', models.CharField(max_length=100)),
                ('file_size', models.PositiveIntegerField(default=0)),
                ('image_width', models.PositiveIntegerField(default=0)),
                ('image_height', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='dataset_management.dataset')),
            ],
            options={
                'verbose_name': 'Dataset Image',
                'verbose_name_plural': 'Dataset Images',
                'ordering': ['class_name', 'original_filename'],
            },
        ),
        migrations.CreateModel(
            name='DatasetClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100)),
                ('image_count', models.PositiveIntegerField(default=0)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='dataset_management.dataset')),
            ],
            options={
                'verbose_name': 'Dataset Class',
                'verbose_name_plural': 'Dataset Classes',
                'ordering': ['class_name'],
                'unique_together': {('dataset', 'class_name')},
            },
        ),
    ]
