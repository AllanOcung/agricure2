# Generated by Django 5.2.4 on 2025-07-14 13:52

import dashboard.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=150)),
                ('description', models.TextField()),
                ('symptoms', models.TextField()),
                ('treatment', models.TextField()),
                ('prevention', models.TextField(blank=True)),
                ('affected_crops', models.TextField(help_text='Comma-separated list of crops')),
                ('severity_levels', models.JSONField(default=dict, help_text='Severity level descriptions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ModelTrainingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=50, unique=True)),
                ('dataset_size', models.PositiveIntegerField()),
                ('training_accuracy', models.FloatField()),
                ('validation_accuracy', models.FloatField()),
                ('test_accuracy', models.FloatField(blank=True, null=True)),
                ('epochs', models.PositiveIntegerField()),
                ('batch_size', models.PositiveIntegerField()),
                ('learning_rate', models.FloatField()),
                ('model_architecture', models.CharField(max_length=100)),
                ('model_file_path', models.CharField(max_length=500)),
                ('weights_file_path', models.CharField(blank=True, max_length=500)),
                ('training_log_file', models.CharField(blank=True, max_length=500)),
                ('is_active', models.BooleanField(default=False)),
                ('training_started_at', models.DateTimeField()),
                ('training_completed_at', models.DateTimeField(blank=True, null=True)),
                ('training_duration', models.DurationField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-training_started_at'],
            },
        ),
        migrations.CreateModel(
            name='CropImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=dashboard.models.upload_to_images)),
                ('crop_type', models.CharField(blank=True, max_length=50)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size', models.PositiveIntegerField()),
                ('image_width', models.PositiveIntegerField(null=True)),
                ('image_height', models.PositiveIntegerField(null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crop_images', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_diseased', models.BooleanField(default=False)),
                ('confidence_score', models.FloatField(help_text='Confidence percentage (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('severity', models.CharField(choices=[('healthy', 'Healthy'), ('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical')], default='healthy', max_length=20)),
                ('model_version', models.CharField(default='v1.0', max_length=50)),
                ('processing_time', models.FloatField(help_text='Processing time in seconds')),
                ('status', models.CharField(choices=[('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='processing', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('alternative_diseases', models.JSONField(default=list, help_text='Other possible diseases with scores')),
                ('region_analysis', models.JSONField(default=dict, help_text='Affected regions in the image')),
                ('recommendations', models.JSONField(default=list, help_text='Treatment recommendations')),
                ('crop_image', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='diagnosis', to='dashboard.cropimage')),
                ('detected_disease', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.disease')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=dashboard.models.upload_to_training)),
                ('crop_type', models.CharField(max_length=50)),
                ('severity', models.CharField(choices=[('healthy', 'Healthy'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('is_validated', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_images', to='dashboard.disease')),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('correct', 'Diagnosis was correct'), ('incorrect', 'Diagnosis was incorrect'), ('partially_correct', 'Partially correct'), ('unsure', 'Not sure')], max_length=20)),
                ('comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actual_disease', models.ForeignKey(blank=True, help_text='What the disease actually was', null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.disease')),
                ('diagnosis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='dashboard.diagnosisresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
